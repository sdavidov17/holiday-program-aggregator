name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Single job that runs all checks
  checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for some checks
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      
      # Intelligent caching
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      # Run all checks in parallel where possible
      - name: Run checks
        run: |
          echo "::group::Linting"
          pnpm lint
          echo "::endgroup::"
          
          echo "::group::Type checking"
          pnpm type-check
          echo "::endgroup::"
          
          echo "::group::Tests"
          cd apps/web && pnpm test:ci
          echo "::endgroup::"
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://test:test@localhost:5432/test_db?schema=public"
          NEXTAUTH_SECRET: "test-secret-for-ci"
          ENCRYPTION_KEY: "test-encryption-key-1234567890123456789012345678"
      
      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            apps/web/coverage/junit.xml
            apps/web/coverage/coverage-summary.json
            apps/web/coverage/ctrf-report.json
            apps/web/coverage/test-report.html
            apps/web/coverage/test-summary.md
      
      # Upload coverage reports
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: apps/web/coverage/
      
      # Add test summary to PR (only on pull requests)
      - name: Test Report Summary
        if: always() && github.event_name == 'pull_request'
        uses: dorny/test-reporter@v1
        with:
          name: Jest Tests
          path: apps/web/coverage/junit.xml
          reporter: jest-junit
          fail-on-error: false
        continue-on-error: true
      
      # Security audit (non-blocking)
      - name: Security audit
        run: pnpm audit --audit-level=high || true
        continue-on-error: true
      
      # Build validation (only on main branch pushes)
      - name: Build check
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: pnpm build
        env:
          SKIP_ENV_VALIDATION: true
          DATABASE_URL: "postgresql://test:test@localhost:5432/test_db?schema=public"
          NEXTAUTH_SECRET: "test-secret-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"
          ENCRYPTION_KEY: "test-encryption-key-1234567890123456789012345678"

  # CodeQL Security Analysis
  security-checks:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Claude Code Review - Automated quality checks
  claude-review:
    name: Claude AI Review
    if: |
      github.event_name == 'pull_request' && 
      github.event.pull_request.draft == false &&
      !contains(github.event.pull_request.title, '[skip-review]') &&
      !contains(github.event.pull_request.title, '[WIP]')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better context
      
      - name: Claude Code Review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Use sticky comments to avoid duplicate reviews
          use_sticky_comment: true
          
          # Comprehensive review prompt
          direct_prompt: |
            Please review this pull request comprehensively:
            
            ## Code Quality
            - Check for best practices and clean code principles
            - Identify code smells or anti-patterns
            - Suggest improvements for readability and maintainability
            
            ## Security
            - Identify potential security vulnerabilities
            - Check for SQL injection, XSS, or authentication issues
            - Verify no secrets or sensitive data are exposed
            
            ## Performance
            - Identify potential performance bottlenecks
            - Check for inefficient queries or algorithms
            - Suggest optimizations where applicable
            
            ## Testing
            - Verify test coverage for new code
            - Check if tests follow BDD patterns where applicable
            - Ensure critical paths are tested
            
            ## TypeScript & React
            - Verify proper TypeScript usage and type safety
            - Check React best practices and hooks usage
            - Identify potential memory leaks or side effects
            
            ## Documentation
            - Check if complex logic is properly documented
            - Verify API changes are documented
            
            Be constructive and prioritize critical issues. Mark security issues as "ðŸ”´ Critical".
          
          # Allow Claude to run tests and checks
          allowed_tools: "Bash(pnpm lint),Bash(pnpm type-check),Bash(pnpm test:ci)"
        continue-on-error: true  # Don't block PR if review fails