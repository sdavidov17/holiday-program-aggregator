name: Quality & Security Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Core quality checks - runs fast, fails fast
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Environment
      uses: ./.github/actions/setup-env
      id: setup
    
    - name: Lint Code
      run: pnpm lint
      env:
        NEXTAUTH_SECRET: "test-secret-for-ci"
    
    - name: Type Check
      run: pnpm type-check
      env:
        NEXTAUTH_SECRET: "test-secret-for-ci"
    
    - name: Run Tests
      run: pnpm test
      env:
        NEXTAUTH_SECRET: "test-secret-for-ci"
    
    - name: Build Application
      run: pnpm build
      env:
        NEXTAUTH_SECRET: "test-secret-for-ci"
        SKIP_ENV_VALIDATION: true

  # Security scans - runs in parallel with quality checks
  security-checks:
    name: Security Scans
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for some scans
    
    - name: Setup Environment
      uses: ./.github/actions/setup-env
    
    # Fast security checks
    - name: Dependency Audit
      run: |
        pnpm audit --audit-level=high || {
          echo "::warning::Found vulnerabilities - check SECURITY.md"
        }
    
    - name: Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --only-verified
    
    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # License compliance - quick check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Environment
      uses: ./.github/actions/setup-env
    
    - name: Check Licenses
      run: |
        cd apps/web
        npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense;Python-2.0" --excludePrivatePackages || true

  # Post-deployment monitoring (only on main)
  monitor-production:
    name: Monitor Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality-checks, security-checks, license-check]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Wait for Vercel Deployment
      run: |
        echo "⏳ Waiting for Vercel to deploy to production..."
        sleep 120  # Wait 2 minutes for Vercel to deploy
    
    - name: Health Check Production
      run: |
        echo "🏥 Checking production health..."
        MAX_RETRIES=5
        RETRY_COUNT=0
        
        until curl -f https://holidayprograms.com.au/api/health/live && \
              curl -f https://holidayprograms.com.au/api/health/ready; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "⚠️ Health check failed - check Vercel dashboard"
            exit 0  # Don't fail the workflow
          fi
          echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
          sleep 30
        done
        
        echo "✅ Production is healthy!"
    
    - name: Tag Release
      if: success()
      run: |
        VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a $VERSION -m "Production release $VERSION"
        git push origin $VERSION || echo "Tag already exists"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Create GitHub Release
      if: success()
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Build release notes
        NOTES="## 🚀 Automatic Production Release\n\n"
        NOTES="${NOTES}**Deployed by**: Vercel\n"
        NOTES="${NOTES}**Live at**: https://holidayprograms.com.au\n\n"
        
        if [ -n "$LAST_TAG" ]; then
          # Extract different types of changes
          FEATURES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD | grep -E "^- feat" | sed 's/feat[(:]//' || true)
          FIXES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD | grep -E "^- fix" | sed 's/fix[(:]//' || true)
          
          if [ -n "$FEATURES" ]; then
            NOTES="${NOTES}### ✨ New Features\n${FEATURES}\n\n"
          fi
          
          if [ -n "$FIXES" ]; then
            NOTES="${NOTES}### 🐛 Bug Fixes\n${FIXES}\n\n"
          fi
        fi
        
        NOTES="${NOTES}### ✅ Quality Assurance\n"
        NOTES="${NOTES}- All tests passed\n"
        NOTES="${NOTES}- Security scans completed\n"
        NOTES="${NOTES}- License compliance verified\n"
        
        # Create release
        gh release create ${{ env.VERSION }} \
          --title "Release ${{ env.VERSION }}" \
          --notes "$NOTES" \
          --target main || echo "Release already exists"

  # Summary for visibility
  checks-summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, security-checks, license-check]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## 📊 Quality & Security Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.quality-checks.result }}" == "success" ]; then
          echo "✅ **Code Quality**: All checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-checks.result }}" == "success" ]; then
          echo "✅ **Security**: No issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security**: Issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.license-check.result }}" == "success" ]; then
          echo "✅ **Licenses**: All compliant" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Licenses**: Compliance issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Deployment" >> $GITHUB_STEP_SUMMARY
        echo "Vercel will automatically deploy:" >> $GITHUB_STEP_SUMMARY
        echo "- **Preview**: Every PR gets a unique URL" >> $GITHUB_STEP_SUMMARY
        echo "- **Production**: Automatic on merge to main" >> $GITHUB_STEP_SUMMARY