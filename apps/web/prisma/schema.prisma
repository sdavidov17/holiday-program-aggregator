generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    password      String?       // For credentials provider
    phoneNumber   String?       // Encrypted PII
    dateOfBirth   String?       // Encrypted PII
    address       String?       // Encrypted PII
    role          UserRole      @default(USER)
    accounts      Account[]
    sessions      Session[]
    subscription  Subscription?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    USER
    ADMIN
}

enum SubscriptionStatus {
    PENDING
    ACTIVE
    PAST_DUE
    CANCELED
    EXPIRED
}

model Subscription {
    id                   String             @id @default(cuid())
    userId               String             @unique
    stripeCustomerId     String?
    stripeSubscriptionId String?            @unique
    stripePriceId        String?
    stripePaymentStatus  String             @default("pending")
    status               SubscriptionStatus @default(PENDING)
    currentPeriodStart   DateTime?
    currentPeriodEnd     DateTime?
    cancelAtPeriodEnd    Boolean            @default(false)
    canceledAt           DateTime?
    expiresAt            DateTime?
    trialEndsAt          DateTime?
    
    // Audit fields for lifecycle management
    lastReminderSentAt   DateTime?
    reminderCount        Int                @default(0)
    
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    
    user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([status, expiresAt])
    @@index([userId])
}

// Provider model for holiday program providers
model Provider {
    id               String    @id @default(cuid())
    name             String
    description      String?
    website          String?
    email            String?
    phone            String?
    address          String?
    suburb           String?
    state            String?
    postcode         String?
    latitude         Float?    // For geospatial features
    longitude        Float?    // For geospatial features
    logoUrl          String?
    bannerImageUrl   String?
    
    // Vetting and publishing status
    isVetted         Boolean   @default(false)
    isPublished      Boolean   @default(false)
    vettedAt         DateTime?
    vettedBy         String?   // User ID of admin who vetted
    publishedAt      DateTime?
    
    // Metadata
    tags             String?   // JSON array of tags
    certifications   String?   // JSON array of certifications
    specializations  String?   // JSON array of specializations
    ageGroups        String?   // JSON array of age groups served
    
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    
    programs         Program[]
    
    @@index([isPublished, isVetted])
    @@index([suburb, state])
}

// Program model for individual holiday programs
model Program {
    id               String    @id @default(cuid())
    providerId       String
    name             String
    description      String?
    category         String?   // e.g., "Sports", "Arts", "STEM", etc.
    
    // Schedule and duration
    startDate        DateTime?
    endDate          DateTime?
    duration         String?   // e.g., "1 week", "3 days"
    schedule         String?   // e.g., "Mon-Fri 9am-3pm"
    
    // Age and capacity
    minAge           Int?
    maxAge           Int?
    capacity         Int?
    spotsAvailable   Int?
    
    // Pricing
    price            Float?
    earlyBirdPrice   Float?
    earlyBirdDeadline DateTime?
    
    // Location (can be different from provider's main location)
    venue            String?
    address          String?
    suburb           String?
    
    // Images and media
    imageUrl         String?
    galleryUrls      String?   // JSON array of image URLs
    
    // Status
    isActive         Boolean   @default(true)
    isPublished      Boolean   @default(false)
    
    // Requirements and features
    requirements     String?   // JSON array of requirements
    includedItems    String?   // JSON array of what's included
    activities       String?   // JSON array of activities
    
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    
    provider         Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    
    @@index([providerId])
    @@index([category, isActive, isPublished])
    @@index([startDate, endDate])
}