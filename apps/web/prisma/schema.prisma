generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    email         String    @unique
    emailVerified DateTime?
    image         String?
    name          String?
    password      String?   // For credentials auth
    role          String    @default("USER") // "USER" or "ADMIN"
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts      Account[]
    sessions      Session[]
    subscriptions Subscription[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Provider {
    id                  String   @id @default(cuid())
    businessName        String
    contactName         String
    email               String
    phone               String
    website             String?
    abn                 String?
    address             String
    suburb              String
    state               String
    postcode            String
    description         String
    logoUrl             String?
    bannerUrl           String?
    capacity            Int?
    ageGroups           String   @default("[]") // JSON array stored as text
    specialNeeds        Boolean  @default(false)
    specialNeedsDetails String?
    isPublished         Boolean  @default(false)
    isVetted            Boolean  @default(false)
    vettingNotes        String?
    vettingDate         DateTime?
    vettingStatus       String   @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, APPROVED, REJECTED
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    programs Program[]

    @@index([suburb, state])
    @@index([isPublished, isVetted])
}

model Program {
    id             String   @id @default(cuid())
    providerId     String
    name           String
    description    String
    category       String
    ageMin         Int
    ageMax         Int
    price          Float
    location       String
    startDate      DateTime
    endDate        DateTime
    startTime      String // Store as "HH:MM"
    endTime        String // Store as "HH:MM"
    daysOfWeek     String   @default("[]") // JSON array of days
    capacity       Int?
    enrollmentUrl  String?
    imageUrl       String?
    isActive       Boolean  @default(true)
    isPublished    Boolean  @default(false)
    programStatus  String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED, CANCELLED
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

    @@index([startDate, endDate])
    @@index([category, isActive, isPublished])
    @@index([providerId])
}

model Subscription {
    id                     String    @id @default(cuid())
    userId                 String    @unique
    status                 String    @default("PENDING") // PENDING, ACTIVE, PAST_DUE, CANCELED, EXPIRED
    stripeCustomerId       String?
    stripeSubscriptionId   String?   @unique
    stripePriceId          String?
    stripePaymentMethodId  String?
    stripePaymentIntentId  String?
    stripePaymentStatus    String?
    currentPeriodStart     DateTime?
    currentPeriodEnd       DateTime?
    canceledAt             DateTime?
    cancelAtPeriodEnd      Boolean   @default(false)
    trialEndsAt            DateTime?
    expiresAt              DateTime?
    lastReminderSent       DateTime?
    reminderCount          Int       @default(0)
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([status, expiresAt])
}