generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    password      String?       // For credentials provider
    phoneNumber   String?       // Encrypted PII
    dateOfBirth   String?       // Encrypted PII
    address       String?       // Encrypted PII
    accounts      Account[]
    sessions      Session[]
    subscription  Subscription?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum SubscriptionStatus {
    PENDING
    ACTIVE
    PAST_DUE
    CANCELED
    EXPIRED
}

model Subscription {
    id                   String             @id @default(cuid())
    userId               String             @unique
    stripeCustomerId     String?
    stripeSubscriptionId String?            @unique
    stripePriceId        String?
    stripePaymentStatus  String             @default("pending")
    status               SubscriptionStatus @default(PENDING)
    currentPeriodStart   DateTime?
    currentPeriodEnd     DateTime?
    cancelAtPeriodEnd    Boolean            @default(false)
    canceledAt           DateTime?
    expiresAt            DateTime?
    trialEndsAt          DateTime?
    
    // Audit fields for lifecycle management
    lastReminderSentAt   DateTime?
    reminderCount        Int                @default(0)
    
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    
    user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([status, expiresAt])
    @@index([userId])
}