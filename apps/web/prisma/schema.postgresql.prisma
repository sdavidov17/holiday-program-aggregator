// This schema is for PostgreSQL (Production/Staging)
// To use: cp schema.postgresql.prisma schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    name          String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    
    // Subscription fields
    subscription  Subscription?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    USER
    ADMIN
    PROVIDER
}

// Subscription model for tracking Stripe subscriptions
model Subscription {
    id                   String            @id @default(cuid())
    userId               String            @unique
    user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Stripe fields
    stripeCustomerId     String            @unique
    stripeSubscriptionId String?           @unique
    stripePriceId        String?
    stripePaymentMethodId String?
    
    // Subscription details
    status               SubscriptionStatus @default(PENDING)
    currentPeriodStart   DateTime?
    currentPeriodEnd     DateTime?
    cancelAtPeriodEnd    Boolean           @default(false)
    canceledAt           DateTime?
    expiresAt            DateTime?
    trialEndsAt          DateTime?
    
    // Lifecycle tracking
    lastReminderSentAt   DateTime?
    reminderCount        Int               @default(0)
    
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
}

enum SubscriptionStatus {
    PENDING
    ACTIVE
    TRIALING
    PAST_DUE
    CANCELED
    EXPIRED
}

// Provider model for managing providers
model Provider {
    id               String   @id @default(cuid())
    businessName     String
    contactName      String
    email            String   @unique
    phone            String
    website          String?
    abn              String?
    
    // Address
    address          String
    suburb           String
    state            String
    postcode         String
    
    // Vetting
    vettingStatus    VettingStatus @default(PENDING)
    vettedBy         String?
    vettedAt         DateTime?
    vettingNotes     String?
    publishedAt      DateTime?
    
    // Business details
    description      String?
    logoUrl          String?
    insuranceDetails String?
    accreditations   String?
    
    programs         Program[]
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
}

enum VettingStatus {
    PENDING
    IN_REVIEW
    APPROVED
    REJECTED
    SUSPENDED
}

// Program model for provider programs
model Program {
    id               String   @id @default(cuid())
    providerId       String
    provider         Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    
    name             String
    description      String
    ageMin           Int
    ageMax           Int
    capacity         Int
    
    // Schedule
    startDate        DateTime?
    endDate          DateTime?
    daysOfWeek       String?  // JSON array of days
    startTime        String?
    endTime          String?
    
    // Location
    venue            String
    address          String?
    suburb           String?
    postcode         String?
    
    // Pricing
    price            Float
    earlyBirdPrice   Float?
    earlyBirdDeadline DateTime?
    
    // Categories
    activityType     String
    ndisApproved     Boolean  @default(false)
    
    // Status
    status           ProgramStatus @default(DRAFT)
    featured         Boolean       @default(false)
    
    // Media
    imageUrl         String?
    
    // Contact
    contactEmail     String?
    contactPhone     String?
    bookingUrl       String?
    
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
}

enum ProgramStatus {
    DRAFT
    PUBLISHED
    FULLY_BOOKED
    CANCELLED
    COMPLETED
}